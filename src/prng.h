/* Copyright (c) 2015, Erik Lundin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *   3. Neither the name of the copyright holder nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.
 *
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#ifndef LIBTWINE_PRNG_H
#define LIBTWINE_PRNG_H

#include <nectar.h>
#include "twine.h"


/* Generates non-deterministic bits using ChaCha20 keystreams. */
struct twine__prng {
    /* ChaCha20 context. */
    struct nectar_chacha20_ctx cx;

    /* Buffer of psuedo-random bytes, which lets us generate larger batches
     * of non-deterministic bits at a time. */
    uint8_t * buf;

    /* Total size of the `buf` array, and a count of how many bytes have
     * already been consumed from it. When `consumed` == `size`, it's time to
     * refill the buffer. */
    size_t size;
    size_t consumed;

    /* This counter dictates how many more times we are allowed to fill the
     * internal buffer using the keystream generated by the same ChaCha20
     * context (key). */
    unsigned int reseed;

    /* Socket configuration object. */
    struct twine_conf * conf;
};


/* Initialize the PRNG context. Returns TWINE_ENOMEM if a necessary memory
 * allocation fails, otherwise TWINE_OK. */
int twine__prng_init(struct twine__prng * prng, struct twine_conf * conf);

/* Free the PRNG context's allocated memory. */
void twine__prng_destroy(struct twine__prng * prng);

/* Read `len` non-deterministic bytes into `buf`. If the PRNG's internal
 * ChaCha20 context needs to be rekeyed, and user-supplied `read_entropy`
 * function fails, the call will fail with TWINE_EENTROPY. */
int twine__prng_read(struct twine__prng * prng, uint8_t * buf, size_t len);


#endif
